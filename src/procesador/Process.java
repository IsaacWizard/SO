/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package procesador;

/**
 *
 * @author HP
 */
import static java.lang.Thread.sleep;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import static procesador.Menu.ch;
import static procesador.Menu.iex;
import static procesador.Menu.mc;
import static procesador.Menu.im;
import static procesador.Menu.cd;
import static procesador.GoogleChrome.cerrarG; //queremos cerrar la ventana google
import static procesador.InternetExplorer.cerrarIe;
public class Process extends javax.swing.JInternalFrame {

    /**
     * Creates new form Process
     */
    public static int mCh; //mostrar Chrome 
    public static int mIe;
    public static double FIS,FTS,FTE;
    boolean estado=true; 
    boolean ocupado=false; //si el procesador está ejecutando algo está ocupado
    ImageIcon imgCh = new ImageIcon(getClass().getResource("/imgs/chrMini.png"));
    ImageIcon imgChG = new ImageIcon(getClass().getResource("/imgs/google-chrome-logo.png"));
    ImageIcon imgIe = new ImageIcon(getClass().getResource("/imgs/ieMini.png"));
    ImageIcon imgIeG = new ImageIcon(getClass().getResource("/imgs/ielogo.png"));
    ImageIcon imgMc = new ImageIcon(getClass().getResource("/imgs/mcMini.png"));
    ImageIcon imgMcG = new ImageIcon(getClass().getResource("/imgs/mclogo.png"));
    ImageIcon imgIm = new ImageIcon(getClass().getResource("/imgs/imMini.png"));
    ImageIcon imgImG = new ImageIcon(getClass().getResource("/imgs/imlogo.png"));
    ImageIcon imgCd = new ImageIcon(getClass().getResource("/imgs/cdMini.png"));
    ImageIcon imgCdG = new ImageIcon(getClass().getResource("/imgs/cdlogo.png"));
    ImageIcon []logos = {imgCh,imgIe,imgMc,imgIm,imgCd};
    ImageIcon listos[]= new ImageIcon[3];
    ImageIcon susListos[]= new ImageIcon[3];
    ImageIcon bloqueados[]= new ImageIcon[2];
    ImageIcon susBloqueados[]= new ImageIcon[2];
    ImageIcon ejec[]= new ImageIcon[1];
    Proceso procesos[] = new Proceso[10];
    int ejCh, ejIe, ejMc, ejIm, ejCd; //para ejecutar tal proceso
    boolean chBloqueado=false, ieBloqueado=false, imBloqueado=false; //nos indica si hay un proceso bloqueado o sus bloqueado
    int t=0, tt=0; //contador que le mide el tiempo al proceso que se está ejecutando, y tt el tiempo total
    int tbim=0; //nos mide el tiempo que dura bloqueado la impresora
    int tiempoB3; //nos da el tiempo total que debe durar el bloqueo de la impresora
    int p; //aquí asignamos la posición del vector en la que está guardado el Proceso
    int pGh, pIm, pIe, pMc, pCd; //las posiciones del vector donde están guardados chrome, ie e impresora
    int l; //se asignan aquí los valores de tiempo de ejecución en procesos
    int blocIm=0, blocG=0, blocIe=0; //para bloquear procesos
    boolean segundaVCh=false, segundaVIe=false, segundaVIm=false;
    int comeCh, comeIe, comeMc, comeIm, comeCd; //el segundo en el que llegó tal proceso
    public Process() {
        initComponents();
        this.setLocation(200, 0);
        //poner un hilo para que se actualice el procesador
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPEjec = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        EspE = new javax.swing.JLabel();
        jPBloc = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        EspB3 = new javax.swing.JLabel();
        EspB2 = new javax.swing.JLabel();
        EspB1 = new javax.swing.JLabel();
        jPSusbloc = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        EspSB3 = new javax.swing.JLabel();
        EspSB2 = new javax.swing.JLabel();
        EspSB1 = new javax.swing.JLabel();
        jPListo = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        EspL1 = new javax.swing.JLabel();
        EspL2 = new javax.swing.JLabel();
        EspL3 = new javax.swing.JLabel();
        jPSuslisto = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        EspSL3 = new javax.swing.JLabel();
        EspSL2 = new javax.swing.JLabel();
        EspSL1 = new javax.swing.JLabel();
        action = new javax.swing.JButton();
        pause = new javax.swing.JButton();
        Estadistica = new javax.swing.JButton();

        setClosable(true);
        setMinimumSize(new java.awt.Dimension(1000, 700));
        setPreferredSize(new java.awt.Dimension(1000, 700));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(null);

        jPEjec.setBackground(new java.awt.Color(255, 255, 255));
        jPEjec.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 2, new java.awt.Color(0, 0, 0)));

        jLabel3.setFont(new java.awt.Font("Tahoma", 3, 20)); // NOI18N
        jLabel3.setText("Ejecución");

        javax.swing.GroupLayout jPEjecLayout = new javax.swing.GroupLayout(jPEjec);
        jPEjec.setLayout(jPEjecLayout);
        jPEjecLayout.setHorizontalGroup(
            jPEjecLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPEjecLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPEjecLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(EspE, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31))
        );
        jPEjecLayout.setVerticalGroup(
            jPEjecLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPEjecLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addGap(26, 26, 26)
                .addComponent(EspE, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(24, Short.MAX_VALUE))
        );

        jPanel1.add(jPEjec);
        jPEjec.setBounds(430, 230, 120, 140);

        jPBloc.setBackground(new java.awt.Color(255, 255, 255));
        jPBloc.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 2, new java.awt.Color(0, 0, 0)));

        jLabel5.setFont(new java.awt.Font("Tahoma", 3, 24)); // NOI18N
        jLabel5.setText("Bloqueado");

        javax.swing.GroupLayout jPBlocLayout = new javax.swing.GroupLayout(jPBloc);
        jPBloc.setLayout(jPBlocLayout);
        jPBlocLayout.setHorizontalGroup(
            jPBlocLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPBlocLayout.createSequentialGroup()
                .addContainerGap(17, Short.MAX_VALUE)
                .addGroup(jPBlocLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPBlocLayout.createSequentialGroup()
                        .addComponent(EspB3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(EspB2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                        .addComponent(EspB1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel5))
                .addGap(34, 34, 34))
        );
        jPBlocLayout.setVerticalGroup(
            jPBlocLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPBlocLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 45, Short.MAX_VALUE)
                .addGroup(jPBlocLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(EspB3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(EspB1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(EspB2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel1.add(jPBloc);
        jPBloc.setBounds(60, 440, 200, 130);

        jPSusbloc.setBackground(new java.awt.Color(255, 255, 255));
        jPSusbloc.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 2, new java.awt.Color(0, 0, 0)));

        jLabel4.setFont(new java.awt.Font("Tahoma", 3, 22)); // NOI18N
        jLabel4.setText("Susp. Bloqueado");

        javax.swing.GroupLayout jPSusblocLayout = new javax.swing.GroupLayout(jPSusbloc);
        jPSusbloc.setLayout(jPSusblocLayout);
        jPSusblocLayout.setHorizontalGroup(
            jPSusblocLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPSusblocLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPSusblocLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPSusblocLayout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPSusblocLayout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(EspSB3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(EspSB2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(EspSB1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(22, 22, 22))))
        );
        jPSusblocLayout.setVerticalGroup(
            jPSusblocLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPSusblocLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
                .addGroup(jPSusblocLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(EspSB3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(EspSB1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(EspSB2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel1.add(jPSusbloc);
        jPSusbloc.setBounds(720, 440, 200, 130);

        jPListo.setBackground(new java.awt.Color(255, 255, 255));
        jPListo.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 2, new java.awt.Color(0, 0, 0)));

        jLabel1.setFont(new java.awt.Font("Tahoma", 3, 24)); // NOI18N
        jLabel1.setText("Listo");

        javax.swing.GroupLayout jPListoLayout = new javax.swing.GroupLayout(jPListo);
        jPListo.setLayout(jPListoLayout);
        jPListoLayout.setHorizontalGroup(
            jPListoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPListoLayout.createSequentialGroup()
                .addGap(64, 64, 64)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(64, Short.MAX_VALUE))
            .addGroup(jPListoLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(EspL3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37)
                .addComponent(EspL2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(EspL1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23))
        );
        jPListoLayout.setVerticalGroup(
            jPListoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPListoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 45, Short.MAX_VALUE)
                .addGroup(jPListoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(EspL3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(EspL1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(EspL2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel1.add(jPListo);
        jPListo.setBounds(60, 30, 200, 130);

        jPSuslisto.setBackground(new java.awt.Color(255, 255, 255));
        jPSuslisto.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 2, new java.awt.Color(0, 0, 0)));

        jLabel2.setFont(new java.awt.Font("Tahoma", 3, 22)); // NOI18N
        jLabel2.setText("Susp. Listo");

        javax.swing.GroupLayout jPSuslistoLayout = new javax.swing.GroupLayout(jPSuslisto);
        jPSuslisto.setLayout(jPSuslistoLayout);
        jPSuslistoLayout.setHorizontalGroup(
            jPSuslistoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPSuslistoLayout.createSequentialGroup()
                .addContainerGap(37, Short.MAX_VALUE)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPSuslistoLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(EspSL3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(EspSL2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(EspSL1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19))
        );
        jPSuslistoLayout.setVerticalGroup(
            jPSuslistoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPSuslistoLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                .addGroup(jPSuslistoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(EspSL3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(EspSL1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(EspSL2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel1.add(jPSuslisto);
        jPSuslisto.setBounds(730, 30, 200, 130);

        action.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/play.png"))); // NOI18N
        action.setBorderPainted(false);
        action.setContentAreaFilled(false);
        action.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        action.setFocusable(false);
        action.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actionActionPerformed(evt);
            }
        });
        jPanel1.add(action);
        action.setBounds(450, 590, 80, 70);

        pause.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/pause.png"))); // NOI18N
        pause.setBorderPainted(false);
        pause.setContentAreaFilled(false);
        pause.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        pause.setFocusable(false);
        pause.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pauseActionPerformed(evt);
            }
        });
        jPanel1.add(pause);
        pause.setBounds(450, 590, 80, 70);

        Estadistica.setBackground(new java.awt.Color(0, 0, 255));
        Estadistica.setFont(new java.awt.Font("Tahoma", 3, 11)); // NOI18N
        Estadistica.setText("Mostrar Estadistica");
        Estadistica.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Estadistica.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EstadisticaActionPerformed(evt);
            }
        });
        jPanel1.add(Estadistica);
        Estadistica.setBounds(110, 610, 150, 23);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 671, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void actionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actionActionPerformed
        estado = true;
        action.setVisible(false);
        pause.setVisible(true);
        
        Thread hilo = new Thread() {
            
            public void run() {
                
                for (;;) {
                    if (estado == true) {
                        try {
                            sleep(500);
                            //poner un hilo para que se actualice el procesador
                            if(ch==1){
                               insertarListo(imgCh);
                               ejCh=1;
                               ch=0; //para que no se ponga en fila una y otra vez
                               comeCh=tt;
                            }
                            if(iex==1){
                               insertarListo(imgIe);
                               ejIe=1;
                               iex=0;
                               comeIe=tt;
                            }
                            if(mc==1){
                               insertarListo(imgMc);
                               ejMc=1;
                               mc=0;
                               comeMc=tt;
                            }
                            if(im==1){
                               insertarListo(imgIm);
                               ejIm=1;
                               im=0;
                               comeIm=tt;
                            }
                            if(cd==1){
                               insertarListo(imgCd);
                               ejCd=1;
                               cd=0; //para que no se ponga en fila una y otra vez
                               comeCd=tt;
                            }
                            mostrarListo();
                            mostrarSusListo();
                            mostrarBloqueado();
                            mostrarSusBloqueado();
                            sleep(500);
                            ejecutar();
                            
                            
                        } catch (Exception e) {
                            System.out.println("error");
                        }

                    } else {
                        break;
                    }
                }
            }
        };
        hilo.start();
    }//GEN-LAST:event_actionActionPerformed

    private void pauseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pauseActionPerformed
        estado = false;
        action.setVisible(true);
        pause.setVisible(false);
    }//GEN-LAST:event_pauseActionPerformed

    private void EstadisticaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EstadisticaActionPerformed
        hacerEstadistica();
    }//GEN-LAST:event_EstadisticaActionPerformed

    public void insertarListo(ImageIcon logo){

        if (listos[0]==null) { 
            listos[0]=logo;
            System.out.println("vacio");
        } else {
            if (listos[1]==null) {
                listos[1]=logo;
            } else {
                if (listos[2]==null) {
                    listos[2]=logo;
                } else {
                    
                        System.out.println("espacios en listos ocupados");
                        insertarSusListo(logo);
                    
                }
            }
        }
    }
    public void insertarSusListo(ImageIcon logo){

        if (susListos[0]==null) {
            susListos[0]=logo;
            System.out.println("vacio");
        } else {
            if (susListos[1]==null) {
                susListos[1]=logo;
            } else {
                if (susListos[2]==null) {
                    susListos[2]=logo;
                } else {
                    
                        System.out.println("no caben mas procesos");
                        
                    
                }
            }
        }
    }
    public void insertarBloqueado(ImageIcon logo){

        if (bloqueados[0]==null) {
            bloqueados[0]=logo;
            System.out.println("vacio");
        } else {
            if (bloqueados[1]==null) {
                bloqueados[1]=logo;
            } else {
                
                    
                        System.out.println("espacios en bloqueados ocupados");
                        insertarSusBloqueado(logo);
                    
                    }   
                }
    }
    public void insertarSusBloqueado(ImageIcon logo){

        if (susBloqueados[0]==null) {
            susBloqueados[0]=logo;
            System.out.println("vacio");
        } else {
            if (susBloqueados[1]==null) {
                susBloqueados[1]=logo;
            } else {
                
                    
                        System.out.println("espacios en sus bloqueados ocupados");
                        
                    
                    }   
                }
    }
    public void mostrarListo(){
        EspL1.setIcon(listos[0]);
        EspL2.setIcon(listos[1]);
        EspL3.setIcon(listos[2]);
    }
    public void mostrarSusListo(){
        EspSL1.setIcon(susListos[0]);
        EspSL2.setIcon(susListos[1]);
        EspSL3.setIcon(susListos[2]);
    }
    public void mostrarBloqueado(){
        EspB1.setIcon(bloqueados[0]);
        EspB2.setIcon(bloqueados[1]);
    }
    public void mostrarSusBloqueado(){
        EspSB1.setIcon(susBloqueados[0]);
        EspSB2.setIcon(susBloqueados[1]);
    }
    public void ejecutar(){

        if(ocupado==false){
            ejec[0]=listos[0]; //para que no esté vacio le asignamos la imagen actual
            if(!(ejec[0]==null)){
                
                ocupado=true;
                if(ejCh==1 && ejec[0]==logos[0]){ //comparamos que chrome esté en espera y que el logo sea el que corresponda
                    EspE.setIcon(imgChG); //Imagen aumentada
                    if(segundaVCh==false){
                    System.out.println("mostrar chrome");
                    
                    ejCh=0; //para que no vuelva a generarse otro proceso igual
                    p=nuevoProceso("Chrome");
                    l = procesos[p].tiempo;
                    procesos[p].setLlegada(comeCh); //asignamos tiempo de llegada
                    pGh=p;
                    }else{
                        l=2;
                        ejCh=0;
                        
                    }
                }
                if(ejIe==1 && ejec[0]==logos[1]){
                    EspE.setIcon(imgIeG); //Imagen aumentada
                    if(segundaVIe==false){
                    System.out.println("mostrar internet explorer");

                    ejIe=0;
                    p=nuevoProceso("Internet Explorer");
                    l = procesos[p].tiempo;
                    procesos[p].setLlegada(comeIe);
                    pIe=p;
                    }else{
                        l=2;
                        ejIe=0;
                        
                    }
                }
                if(ejMc==1 && ejec[0]==logos[2]){
                    EspE.setIcon(imgMcG); //Imagen aumentada
                    System.out.println("ejecutando antivirus");
                    
                    ejMc=0;
                    p=nuevoProceso("McAfee");
                    l = procesos[p].tiempo;
                    procesos[p].setLlegada(comeMc);
                }
                if(ejIm==1 && ejec[0]==logos[3]){
                    EspE.setIcon(imgImG); //Imagen aumentada
                    if(segundaVIm==false){
                    System.out.println("preparando impresión");
                    
                    ejIm=0;
                    p=nuevoProceso("Impresora"); //Creamos clase proceso
                    pIm=p;
                    l = procesos[p].tiempo; //tiempo de ejecución
                    procesos[p].setLlegada(comeIm);
                    }else{
                        l=2;
                        ejIm=0;
                        
                    }
                }
                if(ejCd==1 && ejec[0]==logos[4]){ //comparamos que cd esté en espera y que el logo sea el que corresponda
                    EspE.setIcon(imgCdG); //Imagen aumentada
                    System.out.println("expulsando unidad CD");
                    
                    ejCd=0; //para que no vuelva a generarse otro proceso igual
                    p=nuevoProceso("CD");
                    l = procesos[p].tiempo;
                    procesos[p].setLlegada(comeCd);
                }
                
        
                recorrerListos();
            }
        } else{
            t++;
            System.out.println("tiempo="+t);
        }
        if(t==l){ //cuando se cumpla el tiempo de ejecución
                if("Impresora".equals(procesos[p].getNombre()) && segundaVIm==false){
                    blocIm=1; //se bloquea el proceso impresora
                    insertarBloqueado(ejec[0]);
                }
                if("Chrome".equals(procesos[p].getNombre()) && segundaVCh==false){
                    blocG=1; //se bloquea el proceso impresora
                    insertarBloqueado(ejec[0]);
                }
                if("Internet Explorer".equals(procesos[p].getNombre()) && segundaVIe==false){
                    blocIe=1; //se bloquea el proceso impresora
                    insertarBloqueado(ejec[0]);
                }
                if(imgImG==EspE.getIcon() && segundaVIm==true){ //para que no se vuelvan a ejecutar y ya estén terminados en la segunda vuelta;
                    p=pIm;
                }
                if(imgChG==EspE.getIcon() && segundaVCh==true){
                    p=pGh;
                }
                if(imgIeG==EspE.getIcon() && segundaVIe==true){
                    p=pIe;
                }
                t=0;
                ocupado=false;
                ejec[0]=null;
                EspE.setIcon(ejec[0]);
                System.out.println("Se cumplió el tiempo de ejecución en "+tt);
                procesos[p].setFinal(tt);
            }
        if(blocG==1){ //para poner en bloqueo a Chrome
            t=0; //el tiempo de ejecución regresa a 0
            mCh=1; //mostrar Google Chrome
            
            ocupado=false;

            ejec[0]=null;
            EspE.setIcon(ejec[0]);
            blocG=0;
            
            
        }
        if(blocIe==1){
            t=0; //el tiempo de ejecución regresa a 0
            mIe=1; //mostrar Ie
            
            ocupado=false;

            ejec[0]=null;
            EspE.setIcon(ejec[0]);
            blocIe=0;
            
        }
        if(blocIm==1){
            t=0; //el tiempo de ejecución regresa a 0
            tiempoB3 = (int) (Math.random()*10+5); //tiempo que durará bloqueado
            ocupado=false;

            imBloqueado=true;
            ejec[0]=null;
            EspE.setIcon(ejec[0]);
            blocIm=0;
            
        }
        if(cerrarG==1){
            
                if(bloqueados[0]==logos[0] || bloqueados[1]==logos[0]){ //si el proceso está en Bloqueados
                    insertarListo(logos[0]);
                }else{ //está en sus. Bloquados
                    insertarSusListo(logos[0]);
                }
                eliminarBloqueados(logos[0]);
                segundaVCh=true;
                ejCh=1;
                cerrarG=0;
            
        }
        if(cerrarIe==1){
                cerrarIe=0;
                if(bloqueados[0]==logos[1] || bloqueados[1]==logos[1]){ //si el proceso está en Bloqueados
                    insertarListo(logos[1]);
                }else{ //está en sus. Bloquados
                    insertarSusListo(logos[1]);
                }

                eliminarBloqueados(logos[1]);
                segundaVIe=true;
                ejIe=1;
            
        }
        if(imBloqueado==true){
            tbim++; //contando tiempo bloqueado
            if(tbim>=tiempoB3){
                if(bloqueados[0]==logos[3] || bloqueados[1]==logos[3]){ //si el proceso está en Bloqueados
                    insertarListo(logos[3]);
                }else{ //está en sus. Bloquados
                    insertarSusListo(logos[3]);
                }
                imBloqueado=false;
                tbim=0;
                eliminarBloqueados(logos[3]);
                segundaVIm=true;
                ejIm=1;
            }
        }
        tt++;
    }
    public void recorrerListos(){
        for (int i = 0; i < listos.length-1; i++) { //se recorren los restantes excepto el ultimo lugar porque daría error
            listos[i]=listos[i+1];
        }
        listos[2]=susListos[0]; //poner aquí el que sigue en susListos
        susListos[0]=susListos[1];
        susListos[1]=susListos[2];
        susListos[2]=null;
    }
    public void eliminarBloqueados(ImageIcon logo){ //por ahora hasta aclarar duda

          if(bloqueados[0]==logo){ //se compara uno por uno con ifs para que así si hay mas de un proceso igual solo se elimine uno
              bloqueados[0]=null;
              System.out.println("Se eliminó en bloqueados 0");
          }else{
              if (bloqueados[1]==logo) {
                  bloqueados[1]=null;
              } else {
                  if (susBloqueados[0]==logo) {
                      susBloqueados[0]=null;
                  } else {
                      if (susBloqueados[1]==logo) {
                          susBloqueados[1]=null;
                      } 
                  }
              }
          }
          recorrerBloqueados();
    }
    public void recorrerBloqueados(){
        if(bloqueados[0]==null){ //solo si hay un espacio vacio se recorre
            bloqueados[0]=bloqueados[1];
            bloqueados[1]=susBloqueados[0];
            susBloqueados[0]=susBloqueados[1];
        }
        if(bloqueados[1]==null){
            bloqueados[1]=susBloqueados[0]; //poner aquí el que sigue en susListos
            susBloqueados[0]=susBloqueados[1];
        }
        if(susBloqueados[0]==null){
            susBloqueados[0]=susBloqueados[1];
        }
        susBloqueados[1]=null;
        
    }
    public int nuevoProceso(String nombre){
        int que=0;
        int p=0; //vamos a retornar la posición del vector en la que esta nuestro proceso, iniciamos en 0 por si el vector está lleno
        for(int t=0; t<procesos.length; t++){
               if(procesos[t]==null){ //comprobamos que esté vacio el espacio
                   
                   int n = JOptionPane.showConfirmDialog(null, "¿Desea agregar valores a los tiempos de ejecución?"
                           +"\n"+"Si elige no, entonces se asignarán valores aleatorios", "Asignar valores",JOptionPane.YES_NO_OPTION);
                   if(n==JOptionPane.YES_OPTION){
                       int tiempo = Integer.parseInt(JOptionPane.showInputDialog("Ingrese el tiempo que durará en ejecución el proceso "+nombre));
                       procesos[t] = new Proceso(nombre, tiempo);
                   }else{
                       procesos[t] = new Proceso(nombre);
                   }
                   
                   procesos[t].setLogo(nombre);
                   p=t;
                   t = 100; //salimos del ciclo
               }
               else{
                   que = que+1; //por cada espacio de vector lleno aumenta 1
               }
             }
            if(que>=procesos.length){ //ya no hay espacios
                   JOptionPane.showMessageDialog(null, "Ya no hay espacio para crear mas procesos");
               }
            return p;
    }
    
    public void hacerEstadistica(){
        int i=0;
        double promT=0, promE=0, promI=0;
            while(procesos[i]!=null) {
                procesos[i].setTiempoServicio();
                procesos[i].setTiempoEspera();
                procesos[i].setIndiceServicio();
                System.out.println("----------------------------------------------------------------------------------");
                System.out.println("Nombre del proceso: "+procesos[i].getNombre()+"\n"
                +"Instante de llegada: "+procesos[i].llegada+"\n"
                +"Tiempo de ejecución: "+procesos[i].tiempo+"\n"
                +"Instante de fin: "+procesos[i].fin+"\n"
                +"Tiempo de servicio: "+procesos[i].T+"\n"
                +"Tiempo de espera: "+procesos[i].E+"\n"
                +"Indice de servicio: "+procesos[i].I+"\n");
                promT=promT+procesos[i].T;
                promE=promE+procesos[i].E;
                promI=promI+procesos[i].I;
                i++;
                
            
            }
            System.out.println("-------------------------------------");
            System.out.println("Promedio de Tiempo de servicio: "+(promT/i)+"\n"
            +"Promedio de Tiempo de espera: "+(promE/i)+"\n"
            +"Promedio de Indice de servicio: "+(promI/i)+"\n");
            FIS=promT/i;
            FTE=promE/i;
            FTS=promI/i;
        
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel EspB1;
    private javax.swing.JLabel EspB2;
    private javax.swing.JLabel EspB3;
    private javax.swing.JLabel EspE;
    private javax.swing.JLabel EspL1;
    private javax.swing.JLabel EspL2;
    private javax.swing.JLabel EspL3;
    private javax.swing.JLabel EspSB1;
    private javax.swing.JLabel EspSB2;
    private javax.swing.JLabel EspSB3;
    private javax.swing.JLabel EspSL1;
    private javax.swing.JLabel EspSL2;
    private javax.swing.JLabel EspSL3;
    private javax.swing.JButton Estadistica;
    private javax.swing.JButton action;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPBloc;
    private javax.swing.JPanel jPEjec;
    private javax.swing.JPanel jPListo;
    private javax.swing.JPanel jPSusbloc;
    private javax.swing.JPanel jPSuslisto;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton pause;
    // End of variables declaration//GEN-END:variables
}
